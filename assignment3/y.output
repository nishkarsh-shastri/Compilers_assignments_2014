Terminals unused in grammar

   AUTO
   BREAK
   CASE
   CHAR
   CONST
   CONTINUE
   DEFAULT
   DO
   DOUBLE
   ELSE
   ENUM
   EXTERN
   FLOAT
   FOR
   GOTO
   IF
   INLINE
   INT
   LONG
   REGISTER
   RESTRICT
   RETURN
   SHORT
   SIGNED
   SIZEOF
   STATIC
   STRUCT
   SWITCH
   TYPEDEF
   UNION
   UNSIGNED
   VOID
   VOLATILE
   WHILE
   BOOL
   COMPLEX
   IMAGINARY
   IDENTIFIER
   INTEGER_CONSTANT
   FLOATING_CONSTANT
   ENUMERATION_CONSTANT
   CHARACTER_CONSTANT
   STRING_LITERAL
   POINTER
   INCREMENT
   DECREMENT
   LEFT_SHIFT_OP
   RIGHT_SHIFT_OP
   LESS_THAN_EQUAL_TO
   GREATER_THAN_EQUAL_TO
   EQUALS_TO
   NOT_EQUALS_TO
   AND_OP
   OR_OP
   ELLIPSIS
   ASSIGN_OP
   MULT_ASSIGN
   DIV_ASSIGN
   MOD_ASSIGN
   SUM_ASSIGN
   SUBTRACT_ASSIGN
   LEFT_ASSIGN
   RIGHT_ASSIGN
   AND_ASSIGN
   XOR_ASSIGN
   OR_ASSIGN
   SINGLE_LINE_COMMENT


Grammar

    0 $accept: start $end

    1 start: %empty


Terminals, with rules where they appear

$end (0) 0
error (256)
AUTO (258)
BREAK (259)
CASE (260)
CHAR (261)
CONST (262)
CONTINUE (263)
DEFAULT (264)
DO (265)
DOUBLE (266)
ELSE (267)
ENUM (268)
EXTERN (269)
FLOAT (270)
FOR (271)
GOTO (272)
IF (273)
INLINE (274)
INT (275)
LONG (276)
REGISTER (277)
RESTRICT (278)
RETURN (279)
SHORT (280)
SIGNED (281)
SIZEOF (282)
STATIC (283)
STRUCT (284)
SWITCH (285)
TYPEDEF (286)
UNION (287)
UNSIGNED (288)
VOID (289)
VOLATILE (290)
WHILE (291)
BOOL (292)
COMPLEX (293)
IMAGINARY (294)
IDENTIFIER (295)
INTEGER_CONSTANT (296)
FLOATING_CONSTANT (297)
ENUMERATION_CONSTANT (298)
CHARACTER_CONSTANT (299)
STRING_LITERAL (300)
POINTER (301)
INCREMENT (302)
DECREMENT (303)
LEFT_SHIFT_OP (304)
RIGHT_SHIFT_OP (305)
LESS_THAN_EQUAL_TO (306)
GREATER_THAN_EQUAL_TO (307)
EQUALS_TO (308)
NOT_EQUALS_TO (309)
AND_OP (310)
OR_OP (311)
ELLIPSIS (312)
ASSIGN_OP (313)
MULT_ASSIGN (314)
DIV_ASSIGN (315)
MOD_ASSIGN (316)
SUM_ASSIGN (317)
SUBTRACT_ASSIGN (318)
LEFT_ASSIGN (319)
RIGHT_ASSIGN (320)
AND_ASSIGN (321)
XOR_ASSIGN (322)
OR_ASSIGN (323)
SINGLE_LINE_COMMENT (324)


Nonterminals, with rules where they appear

$accept (70)
    on left: 0
start (71)
    on left: 1, on right: 0


State 0

    0 $accept: . start $end

    $default  reduce using rule 1 (start)

    start  go to state 1


State 1

    0 $accept: start . $end

    $end  shift, and go to state 2


State 2

    0 $accept: start $end .

    $default  accept

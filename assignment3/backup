%{
	#include "y.tab.h"
	extern void yyerror(const char *);
	static void comment(void);
%}

digit	 				[0-9]
letter					[a-zA-Z_]	
WS						[\t\n ]		
integer_constant 		[1-9][0-9]*
exponent				[Ee][+-]?{digit}+
fractional_constant 	[0-9]*?"."[0-9]+|[0-9]+"."[0-9]*
floating_constant  		{fractional_constant}{exponent}?|{digit}+{exponent}
sign 					[+-]
enumeration_constant 	{letter}({digit}|{letter})*
escape_sequence			\\['"\?\\abfnrtv] 
character_constant		"\'"([^'\\\n]|{escape_sequence})+"\'"
string_literal			"\""([^"\\\n]|{escape_sequence})+"\""
%%


"auto"					{ return(AUTO); }
"break"					{ return(BREAK); }
"case"					{ return(CASE); }
"char"					{ return(CHAR); }
"const"					{ return(CONST); }
"continue"				{ return(CONTINUE); }
"default"				{ return(DEFAULT); }
"do"					{ return(DO); }
"double"				{ return(DOUBLE); }
"else"					{ return(ELSE); }
"enum"					{ return(ENUM); }
"extern"				{ return(EXTERN); }
"float"					{ return(FLOAT); }
"for"					{ return(FOR); }
"goto"					{ return(GOTO); }
"if"					{ return(IF); }
"inline"				{ return(INLINE); }
"int"					{ return(INT); }
"long"					{ return(LONG);}
"register"				{ return(REGISTER); }
"restrict"				{ return(RESTRICT); }
"return"				{ return(RETURN); }
"short"					{ return(SHORT); }
"signed"				{ return(SIGNED); }
"sizeof"				{ return(SIZEOF); }
"static"				{ return(STATIC); }
"struct"				{ return(STRUCT); }
"switch"				{ return(SWITCH); }
"typedef"				{ return(TYPEDEF); }
"union"					{ return(UNION); }
"unsigned"				{ return(UNSIGNED); }
"void"					{ return(VOID); }
"volatile"				{ return(VOLATILE); }
"while"					{ return(WHILE); }
"_BOOL"					{ return(_BOOL); }
"_COMPLEX"     			{ return(_COMPLEX); }
"_IMAGINARY"			{ return(_IMAGINARY); }



{letter}({letter}|{digit})* 		{ return(IDENTIFIER);}




{integer_constant}		{ return (INTEGER_CONSTANT);}
{floating_constant}		{ return (FLOATING_CONSTANT);}
{enumeration_constant}	{ return (ENUMERATION_CONSTANT);}	 
{character_constant}	{ return (CHARACTER_CONSTANT);} 



{string_literal} 		{return(STRING_LITERAL);}


"["      				{ return('[');}
"]"      				{ return(']');}
"("      				{ return('(');}
")"      				{ return(')');}
"{"      				{ return('{');}
"}"      				{ return('}');}
"."      				{ return('.');}
"->"      				{ return(POINTER);}
"++"      				{ return(INCREMENT);}
"--"      				{ return(DECREMENT);}
"&"      				{ return('&');}
"*"      				{ return('*');}
"+"      				{ return('+');}
"-"      				{ return('-');}
"~"      				{ return('~');}
"!"      				{ return('!');}
"/"      				{ return('/');}
"%"      				{ return('%');}
"<<"      				{ return(LEFT_SHIFT_OP);}
">>"      				{ return(RIGHT_SHIFT_OP);}
"<"       				{ return('<');}
">"      				{ return('>');}
"<="      				{ return(LESS_THAN_EQUAL_TO);}
">="      				{ return(GREATER_THAN_EQUAL_TO);}
"=="      				{ return(EQUALS_TO);}
"!="      				{ return(NOT_EQUALS_TO);}
"^"      				{ return('^');}
"|"      				{ return('|');}
"&&"      				{ return(AND_OP);}
"||"      				{ return(OR_OP);}
"?"      				{ return('?');}
":"      				{ return(':');}
";"      				{ return(';');}
"..."      				{ return(ELLIPSIS);}
"="      				{ return(ASSIGN_OP);}
"*="      				{ return(MULT_ASSIGN);}
"/="      				{ return(DIV_ASSIGN);}
"%="      				{ return(MOD_ASSIGN);}
"+="      				{ return(SUM_ASSIGN);}
"-="      				{ return(SUBTRACT_ASSIGN);}
"<<="      				{ return(LEFT_ASSIGN);}
">>="      				{ return(RIGHT_ASSIGN);}
"&="      				{ return(AND_ASSIGN);}
"^="      				{ return(XOR_ASSIGN);}
"|="      				{ return(OR_ASSIGN);}
","      				{ return(',');}
"#"      				{ return('#');}
{WS}					{}


"/*"					{comment();}
"//"[^\n]*				{return(SINGLE_LINE_COMMENT);}
%%



static void comment()
{
	int c;
	while((c=input())!= 0)
	{
		if(c=='*')
		{
			while((c=input())=='*');
			if(c =='/')
				return;
			if(c==0)
				break;
		}
	}
	yyerror("Bad statement");
}







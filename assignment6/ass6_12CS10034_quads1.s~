0)  FUNCTION main:
1) _tmp000 = 100
2) _tmp001= A string address
3) param _tmp001
4) _tmp003 = call prints, 1
5) _tmp004 = &err
6) param _tmp004
7) _tmp006 = call readi, 1
8) n = _tmp006
9) _tmp007= A string address
10) param _tmp007
11) _tmp009 = call prints, 1
12) _tmp010 = 0
13) i = _tmp010
14) if i<n goto 16
15) goto 18
16) _tmp011 = 1
17) goto 24
18) _tmp011 = 0
19) goto 30
20) goto 30
21) _tmp012 = i
22) i = i + 1
23) goto 14
24) _tmp013 = i * 4
25) _tmp014 = &err
26) param _tmp014
27) _tmp016 = call readi, 1
28) a[_tmp013] = _tmp016
29) goto 21
30) _tmp017= A string address
31) param _tmp017
32) _tmp019 = call prints, 1
33) i = n
34) _tmp020 = 0
35) if i>_tmp020 goto 37
36) goto 39
37) _tmp021 = 1
38) goto 45
39) _tmp021 = 0
40) goto 88
41) goto 88
42) _tmp022 = i
43) i = i - 1
44) goto 34
45) _tmp023 = 0
46) j = _tmp023
47) _tmp024 = 1
48) _tmp025 = i - _tmp024
49) if j<_tmp025 goto 51
50) goto 53
51) _tmp026 = 1
52) goto 59
53) _tmp026 = 0
54) goto 42
55) goto 87
56) _tmp027 = j
57) j = j + 1
58) goto 47
59) _tmp028 = 1
60) _tmp029 = j + _tmp028
61) _tmp030 = _tmp029 * 4
62) _tmp031 = a[_tmp030]
63) _tmp032 = j * 4
64) _tmp033 = a[_tmp032]
65) if _tmp031<_tmp033 goto 67
66) goto 69
67) _tmp034 = 1
68) goto 72
69) _tmp034 = 0
70) goto 56
71) goto 86
72) _tmp035 = j * 4
73) _tmp036 = a[_tmp035]
74) temp = _tmp036
75) _tmp037 = j * 4
76) _tmp038 = 1
77) _tmp039 = j + _tmp038
78) _tmp040 = _tmp039 * 4
79) _tmp041 = a[_tmp040]
80) a[_tmp037] = _tmp041
81) _tmp042 = 1
82) _tmp043 = j + _tmp042
83) _tmp044 = _tmp043 * 4
84) a[_tmp044] = temp
85) goto 56
86) goto 56
87) goto 42
88) _tmp045= A string address
89) param _tmp045
90) _tmp047 = call prints, 1
91) _tmp048 = 0
92) i = _tmp048
93) if i<n goto 95
94) goto 97
95) _tmp049 = 1
96) goto 103
97) _tmp049 = 0
98) goto 111
99) goto 111
100) _tmp050 = i
101) i = i + 1
102) goto 93
103) _tmp051 = i * 4
104) _tmp052 = a[_tmp051]
105) param _tmp052
106) call printi, 1
107) _tmp054= A string address
108) param _tmp054
109) _tmp056 = call prints, 1
110) goto 100
111) _tmp057= A string address
112) param _tmp057
113) _tmp059 = call prints, 1
114) _tmp060 = 0
115) return _tmp060
116) END of PROGRAM


.data
 STR1:
.string "Enter the total number of integers to sort :"
STR2:
.string "Enter the number one by one:\n"
STR3:
.string "Sorting the array. \n"
STR4:
.string "Printing the sorted array. \n"
STR5:
.string " "
STR6:
.string "\n"

.text
 .globl main
 .type main, @function
main:
pushl	%ebp
movl 	%esp,%ebp
subl	$632,%esp
movl $100, -408(%ebp)
movl $STR1, -428(%ebp)
movl -428(%ebp), %eax
pushl %eax
call prints
movl %eax, -432(%ebp)
leal -424(%ebp), %eax
movl %eax, -436(%ebp)
movl -436(%ebp), %eax
pushl %eax
call readi
movl %eax, -440(%ebp)
movl -440(%ebp), %eax
movl %eax, -420(%ebp)
movl $STR2, -444(%ebp)
movl -444(%ebp), %eax
pushl %eax
call prints
movl %eax, -448(%ebp)
movl $0, -452(%ebp)
movl -452(%ebp), %eax
movl %eax, -412(%ebp)
.LBNO5:
movl -412(%ebp), %eax
cmpl -420(%ebp), %eax
jl  .LBNO1
jmp  .LBNO2
.LBNO1:
movl $1, -456(%ebp)
jmp  .LBNO3
.LBNO2:
movl $0, -456(%ebp)
jmp  .LBNO4
jmp  .LBNO4
.LBNO6:
movl -412(%ebp), %eax
movl %eax, -460(%ebp)
movl -412(%ebp), %eax
addl $1, %eax
movl %eax, -412(%ebp)
jmp  .LBNO5
.LBNO3:
movl -412(%ebp), %eax
imull $4, %eax
movl %eax, -464(%ebp)
leal -424(%ebp), %eax
movl %eax, -468(%ebp)
movl -468(%ebp), %eax
pushl %eax
call readi
movl %eax, -472(%ebp)
movl -472(%ebp), %edx
movl -464(%ebp), %eax
movl %edx, -404(%ebp,%eax,1)
jmp  .LBNO6
.LBNO4:
movl $STR3, -476(%ebp)
movl -476(%ebp), %eax
pushl %eax
call prints
movl %eax, -480(%ebp)
movl -420(%ebp), %eax
movl %eax, -412(%ebp)
.LBNO11:
movl $0, -488(%ebp)
movl -412(%ebp), %eax
cmpl -488(%ebp), %eax
jg  .LBNO7
jmp  .LBNO8
.LBNO7:
movl $1, -492(%ebp)
jmp  .LBNO9
.LBNO8:
movl $0, -492(%ebp)
jmp  .LBNO10
jmp  .LBNO10
.LBNO15:
movl -412(%ebp), %eax
movl %eax, -496(%ebp)
movl -412(%ebp), %eax
subl $1, %eax
movl %eax, -412(%ebp)
jmp  .LBNO11
.LBNO9:
movl $0, -500(%ebp)
movl -500(%ebp), %eax
movl %eax, -416(%ebp)
.LBNO17:
movl $1, -504(%ebp)
movl -412(%ebp), %eax
movl -504(%ebp), %edx
subl %edx, %eax
movl %eax, -508(%ebp)
movl -416(%ebp), %eax
cmpl -508(%ebp), %eax
jl  .LBNO12
jmp  .LBNO13
.LBNO12:
movl $1, -512(%ebp)
jmp  .LBNO14
.LBNO13:
movl $0, -512(%ebp)
jmp  .LBNO15
jmp  .LBNO16
.LBNO21:
movl -416(%ebp), %eax
movl %eax, -516(%ebp)
movl -416(%ebp), %eax
addl $1, %eax
movl %eax, -416(%ebp)
jmp  .LBNO17
.LBNO14:
movl $1, -520(%ebp)
movl -416(%ebp), %eax
movl -520(%ebp), %edx
addl %edx, %eax
movl %eax, -524(%ebp)
movl -524(%ebp), %eax
imull $4, %eax
movl %eax, -528(%ebp)
movl -528(%ebp), %eax
movl -404(%ebp,%eax,1), %eax
movl %eax, -532(%ebp)
movl -416(%ebp), %eax
imull $4, %eax
movl %eax, -536(%ebp)
movl -536(%ebp), %eax
movl -404(%ebp,%eax,1), %eax
movl %eax, -540(%ebp)
movl -532(%ebp), %eax
cmpl -540(%ebp), %eax
jl  .LBNO18
jmp  .LBNO19
.LBNO18:
movl $1, -544(%ebp)
jmp  .LBNO20
.LBNO19:
movl $0, -544(%ebp)
jmp  .LBNO21
jmp  .LBNO22
.LBNO20:
movl -416(%ebp), %eax
imull $4, %eax
movl %eax, -548(%ebp)
movl -548(%ebp), %eax
movl -404(%ebp,%eax,1), %eax
movl %eax, -552(%ebp)
movl -552(%ebp), %eax
movl %eax, -484(%ebp)
movl -416(%ebp), %eax
imull $4, %eax
movl %eax, -556(%ebp)
movl $1, -560(%ebp)
movl -416(%ebp), %eax
movl -560(%ebp), %edx
addl %edx, %eax
movl %eax, -564(%ebp)
movl -564(%ebp), %eax
imull $4, %eax
movl %eax, -568(%ebp)
movl -568(%ebp), %eax
movl -404(%ebp,%eax,1), %eax
movl %eax, -572(%ebp)
movl -572(%ebp), %edx
movl -556(%ebp), %eax
movl %edx, -404(%ebp,%eax,1)
movl $1, -576(%ebp)
movl -416(%ebp), %eax
movl -576(%ebp), %edx
addl %edx, %eax
movl %eax, -580(%ebp)
movl -580(%ebp), %eax
imull $4, %eax
movl %eax, -584(%ebp)
movl -484(%ebp), %edx
movl -584(%ebp), %eax
movl %edx, -404(%ebp,%eax,1)
jmp  .LBNO21
.LBNO22:
jmp  .LBNO21
.LBNO16:
jmp  .LBNO15
.LBNO10:
movl $STR4, -588(%ebp)
movl -588(%ebp), %eax
pushl %eax
call prints
movl %eax, -592(%ebp)
movl $0, -596(%ebp)
movl -596(%ebp), %eax
movl %eax, -412(%ebp)
.LBNO27:
movl -412(%ebp), %eax
cmpl -420(%ebp), %eax
jl  .LBNO23
jmp  .LBNO24
.LBNO23:
movl $1, -600(%ebp)
jmp  .LBNO25
.LBNO24:
movl $0, -600(%ebp)
jmp  .LBNO26
jmp  .LBNO26
.LBNO28:
movl -412(%ebp), %eax
movl %eax, -604(%ebp)
movl -412(%ebp), %eax
addl $1, %eax
movl %eax, -412(%ebp)
jmp  .LBNO27
.LBNO25:
movl -412(%ebp), %eax
imull $4, %eax
movl %eax, -608(%ebp)
movl -608(%ebp), %eax
movl -404(%ebp,%eax,1), %eax
movl %eax, -612(%ebp)
movl -612(%ebp), %eax
pushl %eax
call printi
movl $STR5, -616(%ebp)
movl -616(%ebp), %eax
pushl %eax
call prints
movl %eax, -620(%ebp)
jmp  .LBNO28
.LBNO26:
movl $STR6, -624(%ebp)
movl -624(%ebp), %eax
pushl %eax
call prints
movl %eax, -628(%ebp)
movl $0, -632(%ebp)
movl -632(%ebp), %eax
movl %ebp,%esp
popl %ebp
ret
